/*
 * -------------------------------------------------
 *  UVRI qiime2 Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
// Some help with time stamps
import java.text.SimpleDateFormat
params {
  name = false
  version = 0.1 //pipeline version
  // Pipeline Options
  reads='/home/assekagiri/accreditation/16s_rRNA/data/set2/*R{1,2}.fastq'
  reference = '/home/assekagiri/accreditation/16s_rRNA/databases/silva/silva_classifier.qza'
  man='manifest.csv'
  timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
  outdir = "./" + "qiime2-results-" + timestamp
  ticket = 0 //for Redmine, not currently used (KL)
  // Trimming
  primerFor ='GTGCCAGCMGCCGCGGTAA'
  primerRev ='GGACTACHVGGGTWTCTAAT'
  trimFor =  0
  trimRev =  0
  truncFor = 230
  truncRev = 200
  truncQ = 2
  denoiser = 'dada2'
  // NYI, for dada sample inference pooling (requires all samples)
  pool = "none"
}

profiles {

  uvri{
    includeConfig 'conf/uvri.config'
  }
  base{
    includeConfig 'conf/base.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
  
}

// specify docker containers for these tools needed
process {
    container='qiime2/core:2018.11'
    withName:runFastqc {
        container = 'quay.io/biocontainers/fastqc:0.11.8--1'
    }
    withName:runMultiqc {
        container = 'quay.io/biocontainers/multiqc:1.7--py_4'
    }
    withName:run_picrust2 {
        container = 'quay.io/biocontainers/picrust2:2.1.4_b--py_0'
    }
}
docker {
    enabled = true
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/qiime2_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/qiime2_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/qiime2_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/qiime2_DAG.html"
}

manifest {
  homePage = 'https://github.com/AlfredUg/qiime2-pipeline'
  description = 'Nextflow qiime2 analysis pipeline for UVRI'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
